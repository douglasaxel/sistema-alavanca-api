// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  MASTER
  ADMIN
  CUSTOMER
  BASIC
}

model User {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  email     String    @unique @db.VarChar(255)
  password  String    @db.VarChar(255)
  image     String    @db.VarChar(255)
  role      UserRole
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("users")
}

model Customer {
  id          Int       @id @default(autoincrement())
  image       String    @db.VarChar(255)
  name        String    @db.VarChar(255)
  companyName String?   @db.VarChar(255)
  phone       String?   @unique @db.VarChar(255)
  email       String?   @unique @db.VarChar(255)
  cnpj        String    @unique @db.VarChar(255)
  accountable String    @db.VarChar(255)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  projects  Project[]
  contacts  Contact[]
  addresses Address[]

  @@index([cnpj])
  @@map("customers")
}

model Address {
  id           Int      @id @default(autoincrement())
  idCustomer   Int
  zipCode      String   @db.VarChar(30)
  street       String   @db.VarChar(255)
  number       Int
  complement   String?  @db.VarChar(255)
  neighborhood String   @db.VarChar(255)
  city         String   @db.VarChar(255)
  state        String   @db.VarChar(255)
  country      String   @db.VarChar(255)
  createdAt    DateTime @default(now())

  customer Customer @relation(fields: [idCustomer], references: [id])

  @@map("address")
}

model Contact {
  id         Int      @id @default(autoincrement())
  idCustomer Int
  idAddress  Int?
  name       String   @db.VarChar(255)
  email      String   @db.VarChar(255)
  phone      String   @db.VarChar(255)
  createdAt  DateTime @default(now())

  customer Customer @relation(fields: [idCustomer], references: [id])

  @@map("contacts")
}

enum ProjectStatus {
  FINISHED
  PENDING
  LATE
}

model Project {
  id                Int           @id @default(autoincrement())
  idCustomer        Int?
  code              Int           @default(0)
  name              String        @db.VarChar(255)
  description       String        @db.Text
  accountable       String        @db.VarChar(255)
  value             Float         @db.Double
  airtableUrl       String?       @db.VarChar(255)
  airtableIframeUrl String?       @db.VarChar(255)
  driveFolderId     String        @db.VarChar(255)
  status            ProjectStatus @default(PENDING)
  startDate         DateTime
  endDate           DateTime
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  deletedAt         DateTime?

  customer      Customer?                 @relation(fields: [idCustomer], references: [id])
  airtableLinks AirtableLink[]
  messages      Message[]
  collaborators CollaboratorsOnProjects[]

  @@map("projects")
}

model Collaborator {
  id        Int                       @id @default(autoincrement())
  name      String                    @db.VarChar(255)
  email     String                    @unique @db.VarChar(255)
  createdAt DateTime                  @default(now())
  projects  CollaboratorsOnProjects[]

  @@index([email])
  @@map("collaborators")
}

model CollaboratorsOnProjects {
  idProject      Int
  idCollaborator Int
  assignedAt     DateTime @default(now())

  project      Project      @relation(fields: [idProject], references: [id])
  collaborator Collaborator @relation(fields: [idCollaborator], references: [id])

  @@id([idProject, idCollaborator])
  @@map("collaborator_to_project")
}

model AirtableLink {
  id        Int     @id @default(autoincrement())
  idProject Int
  url       String  @db.VarChar(255)
  iframe    String? @db.VarChar(255)

  project Project @relation(fields: [idProject], references: [id])

  @@map("airtable_links")
}

model Message {
  id         Int      @id @default(autoincrement())
  idProject  Int
  message    String   @db.LongText
  sender     String   @db.VarChar(255)
  sentDate   DateTime
  attachment String?  @map("attatchment") @db.TinyText
  createdAt  DateTime @default(now())

  project Project @relation(fields: [idProject], references: [id])

  @@map("messages")
}
